name: CI/CD Pipeline - AI Delivery Compliance Coach

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'
  AZURE_WEBAPP_NAME: 'ai-compliance-coach'
  AZURE_WEBAPP_PACKAGE_PATH: '.'

jobs:
  # Continuous Integration
  ci:
    name: 'Continuous Integration'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm install
    
    - name: Run linting
      run: |
        npm run lint || echo "No lint script found"
    
    - name: Run frontend tests
      run: |
        npm test -- --coverage --watchAll=false
      env:
        CI: true
    
    - name: Run backend tests
      run: |
        cd backend
        npm test || echo "No backend tests found"
    
    - name: Build frontend
      run: |
        npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: |
          build/
          backend/
          package.json
        retention-days: 30

  # Security Scanning
  security:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: ci
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run security audit
      run: |
        npm audit --audit-level=high
        cd backend && npm audit --audit-level=high
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # Continuous Deployment to Staging
  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    needs: [ci, security]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
    
    - name: Deploy to Azure App Service (Staging)
      uses: azure/webapps-deploy@v2
      with:
        app-name: '${{ env.AZURE_WEBAPP_NAME }}-staging'
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
    
    - name: Run smoke tests on staging
      run: |
        sleep 30
        curl -f https://${{ env.AZURE_WEBAPP_NAME }}-staging.azurewebsites.net/api/health || exit 1

  # Continuous Deployment to Production
  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [ci, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
    
    - name: Deploy to Azure App Service (Production)
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_PRODUCTION }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
    
    - name: Run production smoke tests
      run: |
        sleep 30
        curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/health || exit 1
    
    - name: Create GitHub Release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## Changes in this release
          - Automated deployment from commit ${{ github.sha }}
          - Build artifacts generated from CI pipeline
          
          ## Deployment Status
          - ‚úÖ Frontend deployed successfully
          - ‚úÖ Backend API deployed successfully
          - ‚úÖ Smoke tests passed
        draft: false
        prerelease: false

  # Notification
  notify:
    name: 'Notify Team'
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "üéâ Deployment successful to ${{ github.ref == 'refs/heads/main' && 'Production' || 'Staging' }}"
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed. Please check the logs."